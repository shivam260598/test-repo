{"ast":null,"code":"import { CsvError } from './CsvError.js';\nimport { is_object } from '../utils/is_object.js';\n\nconst normalize_columns_array = function (columns) {\n  const normalizedColumns = [];\n\n  for (let i = 0, l = columns.length; i < l; i++) {\n    const column = columns[i];\n\n    if (column === undefined || column === null || column === false) {\n      normalizedColumns[i] = {\n        disabled: true\n      };\n    } else if (typeof column === 'string') {\n      normalizedColumns[i] = {\n        name: column\n      };\n    } else if (is_object(column)) {\n      if (typeof column.name !== 'string') {\n        throw new CsvError('CSV_OPTION_COLUMNS_MISSING_NAME', ['Option columns missing name:', `property \"name\" is required at position ${i}`, 'when column is an object literal']);\n      }\n\n      normalizedColumns[i] = column;\n    } else {\n      throw new CsvError('CSV_INVALID_COLUMN_DEFINITION', ['Invalid column definition:', 'expect a string or a literal object,', `got ${JSON.stringify(column)} at position ${i}`]);\n    }\n  }\n\n  return normalizedColumns;\n};\n\nexport { normalize_columns_array };","map":{"version":3,"names":["CsvError","is_object","normalize_columns_array","columns","normalizedColumns","i","l","length","column","undefined","disabled","name","JSON","stringify"],"sources":["/Users/shivamsingh/stocks-application/node_modules/csv-parse/lib/api/normalize_columns_array.js"],"sourcesContent":["\nimport {CsvError} from './CsvError.js';\nimport {is_object} from '../utils/is_object.js';\n\nconst normalize_columns_array = function(columns){\n  const normalizedColumns = [];\n  for(let i = 0, l = columns.length; i < l; i++){\n    const column = columns[i];\n    if(column === undefined || column === null || column === false){\n      normalizedColumns[i] = { disabled: true };\n    }else if(typeof column === 'string'){\n      normalizedColumns[i] = { name: column };\n    }else if(is_object(column)){\n      if(typeof column.name !== 'string'){\n        throw new CsvError('CSV_OPTION_COLUMNS_MISSING_NAME', [\n          'Option columns missing name:',\n          `property \"name\" is required at position ${i}`,\n          'when column is an object literal'\n        ]);\n      }\n      normalizedColumns[i] = column;\n    }else{\n      throw new CsvError('CSV_INVALID_COLUMN_DEFINITION', [\n        'Invalid column definition:',\n        'expect a string or a literal object,',\n        `got ${JSON.stringify(column)} at position ${i}`\n      ]);\n    }\n  }\n  return normalizedColumns;\n};\n\nexport {normalize_columns_array};\n"],"mappings":"AACA,SAAQA,QAAR,QAAuB,eAAvB;AACA,SAAQC,SAAR,QAAwB,uBAAxB;;AAEA,MAAMC,uBAAuB,GAAG,UAASC,OAAT,EAAiB;EAC/C,MAAMC,iBAAiB,GAAG,EAA1B;;EACA,KAAI,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,OAAO,CAACI,MAA3B,EAAmCF,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,EAA3C,EAA8C;IAC5C,MAAMG,MAAM,GAAGL,OAAO,CAACE,CAAD,CAAtB;;IACA,IAAGG,MAAM,KAAKC,SAAX,IAAwBD,MAAM,KAAK,IAAnC,IAA2CA,MAAM,KAAK,KAAzD,EAA+D;MAC7DJ,iBAAiB,CAACC,CAAD,CAAjB,GAAuB;QAAEK,QAAQ,EAAE;MAAZ,CAAvB;IACD,CAFD,MAEM,IAAG,OAAOF,MAAP,KAAkB,QAArB,EAA8B;MAClCJ,iBAAiB,CAACC,CAAD,CAAjB,GAAuB;QAAEM,IAAI,EAAEH;MAAR,CAAvB;IACD,CAFK,MAEA,IAAGP,SAAS,CAACO,MAAD,CAAZ,EAAqB;MACzB,IAAG,OAAOA,MAAM,CAACG,IAAd,KAAuB,QAA1B,EAAmC;QACjC,MAAM,IAAIX,QAAJ,CAAa,iCAAb,EAAgD,CACpD,8BADoD,EAEnD,2CAA0CK,CAAE,EAFO,EAGpD,kCAHoD,CAAhD,CAAN;MAKD;;MACDD,iBAAiB,CAACC,CAAD,CAAjB,GAAuBG,MAAvB;IACD,CATK,MASD;MACH,MAAM,IAAIR,QAAJ,CAAa,+BAAb,EAA8C,CAClD,4BADkD,EAElD,sCAFkD,EAGjD,OAAMY,IAAI,CAACC,SAAL,CAAeL,MAAf,CAAuB,gBAAeH,CAAE,EAHG,CAA9C,CAAN;IAKD;EACF;;EACD,OAAOD,iBAAP;AACD,CA1BD;;AA4BA,SAAQF,uBAAR"},"metadata":{},"sourceType":"module"}