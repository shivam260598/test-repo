{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Fuse from \"fuse.js\"; // import { parse } from 'csv-parse';\n\nconst useApp = () => {\n  _s();\n\n  const [response, setResponse] = useState([]);\n  const [inputSearch, setInputSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [page, setPage] = useState(\"\");\n\n  const getApi = async () => {\n    try {\n      await fetch(\"https://prototype.sbulltech.com/api/v2/instruments\").then(function (response) {\n        return response.text();\n      }).then(function (data) {\n        // const arr = data.split(\"\\n\");\n        // let array = [];\n        // arr.forEach((element, index) => {\n        //   const companyInfo = element.split(\",\");\n        //   if (companyInfo[0] && index !== 0) {\n        //     array = [\n        //       ...array,\n        //       {\n        //         symbol: companyInfo[0],\n        //         name: companyInfo[1],\n        //         sector: companyInfo[2],\n        //         validTill: companyInfo[3],\n        //       },\n        //     ];\n        //   }\n        // });\n        // setResponse(array);\n        const records = []; // const parser = parse({\n        //   delimiter: ':'\n        // });\n        // parser.on('readable', function(){\n        //   let record;\n        //   while ((record = parser.read()) !== null) {\n        //     records.push(record);\n        //   }\n        // });\n\n        console.log('records :: ', records);\n      });\n    } catch (error) {\n      console.log(\"error :: \", error);\n    }\n  };\n\n  useEffect(() => {\n    getApi();\n  }, []);\n  useEffect(() => {\n    const fuse = new Fuse(response, {\n      keys: [\"symbol\", \"name\"],\n      shouldSort: true,\n      includeScore: true,\n      threshold: 0.5\n    });\n    const results = fuse.search(inputSearch);\n    setSearchResult(results);\n  }, [inputSearch, response]);\n  return {\n    searchResult,\n    inputSearch,\n    setInputSearch,\n    response,\n    page,\n    setPage\n  };\n};\n\n_s(useApp, \"QRHpss2jqjM5Qyr8JFB68nIQwzg=\");\n\nexport default useApp;","map":{"version":3,"names":["useEffect","useState","Fuse","useApp","response","setResponse","inputSearch","setInputSearch","searchResult","setSearchResult","page","setPage","getApi","fetch","then","text","data","records","console","log","error","fuse","keys","shouldSort","includeScore","threshold","results","search"],"sources":["/Users/shivamsingh/stocks-application/src/useApp.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Fuse from \"fuse.js\";\n// import { parse } from 'csv-parse';\n\nconst useApp = () => {\n  const [response, setResponse] = useState([]);\n  const [inputSearch, setInputSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [page, setPage] = useState(\"\");\n\n  const getApi = async () => {\n    try {\n      await fetch(\"https://prototype.sbulltech.com/api/v2/instruments\")\n        .then(function (response) {\n          return response.text();\n        })\n        .then(function (data) {\n          // const arr = data.split(\"\\n\");\n          // let array = [];\n          // arr.forEach((element, index) => {\n          //   const companyInfo = element.split(\",\");\n          //   if (companyInfo[0] && index !== 0) {\n          //     array = [\n          //       ...array,\n          //       {\n          //         symbol: companyInfo[0],\n          //         name: companyInfo[1],\n          //         sector: companyInfo[2],\n          //         validTill: companyInfo[3],\n          //       },\n          //     ];\n          //   }\n          // });\n\n          // setResponse(array);\n\n          const records = [];\n\n          // const parser = parse({\n          //   delimiter: ':'\n          // });\n          \n          // parser.on('readable', function(){\n          //   let record;\n          //   while ((record = parser.read()) !== null) {\n          //     records.push(record);\n          //   }\n          // });\n\n          console.log('records :: ', records);\n\n\n        });\n    } catch (error) {\n      console.log(\"error :: \", error);\n    }\n  };\n\n  useEffect(() => {\n    getApi();\n  }, []);\n\n  useEffect(() => {\n    const fuse = new Fuse(response, {\n      keys: [\"symbol\", \"name\"],\n      shouldSort: true,\n      includeScore: true,\n      threshold: 0.5,\n    });\n\n    const results = fuse.search(inputSearch);\n    setSearchResult(results);\n  }, [inputSearch, response]);\n\n  return {\n    searchResult,\n    inputSearch,\n    setInputSearch,\n    response,\n    page,\n    setPage,\n  };\n};\n\nexport default useApp;\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,SAAjB,C,CACA;;AAEA,MAAMC,MAAM,GAAG,MAAM;EAAA;;EACnB,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;;EAEA,MAAMW,MAAM,GAAG,YAAY;IACzB,IAAI;MACF,MAAMC,KAAK,CAAC,oDAAD,CAAL,CACHC,IADG,CACE,UAAUV,QAAV,EAAoB;QACxB,OAAOA,QAAQ,CAACW,IAAT,EAAP;MACD,CAHG,EAIHD,IAJG,CAIE,UAAUE,IAAV,EAAgB;QACpB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEA;QAEA,MAAMC,OAAO,GAAG,EAAhB,CApBoB,CAsBpB;QACA;QACA;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEAC,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,OAA3B;MAGD,CAxCG,CAAN;IAyCD,CA1CD,CA0CE,OAAOG,KAAP,EAAc;MACdF,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,KAAzB;IACD;EACF,CA9CD;;EAgDApB,SAAS,CAAC,MAAM;IACdY,MAAM;EACP,CAFQ,EAEN,EAFM,CAAT;EAIAZ,SAAS,CAAC,MAAM;IACd,MAAMqB,IAAI,GAAG,IAAInB,IAAJ,CAASE,QAAT,EAAmB;MAC9BkB,IAAI,EAAE,CAAC,QAAD,EAAW,MAAX,CADwB;MAE9BC,UAAU,EAAE,IAFkB;MAG9BC,YAAY,EAAE,IAHgB;MAI9BC,SAAS,EAAE;IAJmB,CAAnB,CAAb;IAOA,MAAMC,OAAO,GAAGL,IAAI,CAACM,MAAL,CAAYrB,WAAZ,CAAhB;IACAG,eAAe,CAACiB,OAAD,CAAf;EACD,CAVQ,EAUN,CAACpB,WAAD,EAAcF,QAAd,CAVM,CAAT;EAYA,OAAO;IACLI,YADK;IAELF,WAFK;IAGLC,cAHK;IAILH,QAJK;IAKLM,IALK;IAMLC;EANK,CAAP;AAQD,CA9ED;;GAAMR,M;;AAgFN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}