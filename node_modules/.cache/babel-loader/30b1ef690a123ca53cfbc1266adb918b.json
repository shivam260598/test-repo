{"ast":null,"code":"class ResizeableBuffer {\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    this.size = size;\n    this.length = 0;\n    this.buf = Buffer.allocUnsafe(size);\n  }\n\n  prepend(val) {\n    if (Buffer.isBuffer(val)) {\n      const length = this.length + val.length;\n\n      if (length >= this.size) {\n        this.resize();\n\n        if (length >= this.size) {\n          throw Error('INVALID_BUFFER_STATE');\n        }\n      }\n\n      const buf = this.buf;\n      this.buf = Buffer.allocUnsafe(this.size);\n      val.copy(this.buf, 0);\n      buf.copy(this.buf, val.length);\n      this.length += val.length;\n    } else {\n      const length = this.length++;\n\n      if (length === this.size) {\n        this.resize();\n      }\n\n      const buf = this.clone();\n      this.buf[0] = val;\n      buf.copy(this.buf, 1, 0, length);\n    }\n  }\n\n  append(val) {\n    const length = this.length++;\n\n    if (length === this.size) {\n      this.resize();\n    }\n\n    this.buf[length] = val;\n  }\n\n  clone() {\n    return Buffer.from(this.buf.slice(0, this.length));\n  }\n\n  resize() {\n    const length = this.length;\n    this.size = this.size * 2;\n    const buf = Buffer.allocUnsafe(this.size);\n    this.buf.copy(buf, 0, 0, length);\n    this.buf = buf;\n  }\n\n  toString(encoding) {\n    if (encoding) {\n      return this.buf.slice(0, this.length).toString(encoding);\n    } else {\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n    }\n  }\n\n  toJSON() {\n    return this.toString('utf8');\n  }\n\n  reset() {\n    this.length = 0;\n  }\n\n}\n\nexport default ResizeableBuffer;","map":{"version":3,"names":["ResizeableBuffer","constructor","size","length","buf","Buffer","allocUnsafe","prepend","val","isBuffer","resize","Error","copy","clone","append","from","slice","toString","encoding","Uint8Array","prototype","call","toJSON","reset"],"sources":["/Users/shivamsingh/stocks-application/node_modules/csv-parse/lib/utils/ResizeableBuffer.js"],"sourcesContent":["\nclass ResizeableBuffer{\n  constructor(size=100){\n    this.size = size;\n    this.length = 0;\n    this.buf = Buffer.allocUnsafe(size);\n  }\n  prepend(val){\n    if(Buffer.isBuffer(val)){\n      const length = this.length + val.length;\n      if(length >= this.size){\n        this.resize();\n        if(length >= this.size){\n          throw Error('INVALID_BUFFER_STATE');\n        }\n      }\n      const buf = this.buf;\n      this.buf = Buffer.allocUnsafe(this.size);\n      val.copy(this.buf, 0);\n      buf.copy(this.buf, val.length);\n      this.length += val.length;\n    }else{\n      const length = this.length++;\n      if(length === this.size){\n        this.resize();\n      }\n      const buf = this.clone();\n      this.buf[0] = val;\n      buf.copy(this.buf,1, 0, length);\n    }\n  }\n  append(val){\n    const length = this.length++;\n    if(length === this.size){\n      this.resize();\n    }\n    this.buf[length] = val;\n  }\n  clone(){\n    return Buffer.from(this.buf.slice(0, this.length));\n  }\n  resize(){\n    const length = this.length;\n    this.size = this.size * 2;\n    const buf = Buffer.allocUnsafe(this.size);\n    this.buf.copy(buf,0, 0, length);\n    this.buf = buf;\n  }\n  toString(encoding){\n    if(encoding){\n      return this.buf.slice(0, this.length).toString(encoding);\n    }else{\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n    }\n  }\n  toJSON(){\n    return this.toString('utf8');\n  }\n  reset(){\n    this.length = 0;\n  }\n}\n\nexport default ResizeableBuffer;\n"],"mappings":"AACA,MAAMA,gBAAN,CAAsB;EACpBC,WAAW,GAAU;IAAA,IAATC,IAAS,uEAAJ,GAAI;IACnB,KAAKA,IAAL,GAAYA,IAAZ;IACA,KAAKC,MAAL,GAAc,CAAd;IACA,KAAKC,GAAL,GAAWC,MAAM,CAACC,WAAP,CAAmBJ,IAAnB,CAAX;EACD;;EACDK,OAAO,CAACC,GAAD,EAAK;IACV,IAAGH,MAAM,CAACI,QAAP,CAAgBD,GAAhB,CAAH,EAAwB;MACtB,MAAML,MAAM,GAAG,KAAKA,MAAL,GAAcK,GAAG,CAACL,MAAjC;;MACA,IAAGA,MAAM,IAAI,KAAKD,IAAlB,EAAuB;QACrB,KAAKQ,MAAL;;QACA,IAAGP,MAAM,IAAI,KAAKD,IAAlB,EAAuB;UACrB,MAAMS,KAAK,CAAC,sBAAD,CAAX;QACD;MACF;;MACD,MAAMP,GAAG,GAAG,KAAKA,GAAjB;MACA,KAAKA,GAAL,GAAWC,MAAM,CAACC,WAAP,CAAmB,KAAKJ,IAAxB,CAAX;MACAM,GAAG,CAACI,IAAJ,CAAS,KAAKR,GAAd,EAAmB,CAAnB;MACAA,GAAG,CAACQ,IAAJ,CAAS,KAAKR,GAAd,EAAmBI,GAAG,CAACL,MAAvB;MACA,KAAKA,MAAL,IAAeK,GAAG,CAACL,MAAnB;IACD,CAbD,MAaK;MACH,MAAMA,MAAM,GAAG,KAAKA,MAAL,EAAf;;MACA,IAAGA,MAAM,KAAK,KAAKD,IAAnB,EAAwB;QACtB,KAAKQ,MAAL;MACD;;MACD,MAAMN,GAAG,GAAG,KAAKS,KAAL,EAAZ;MACA,KAAKT,GAAL,CAAS,CAAT,IAAcI,GAAd;MACAJ,GAAG,CAACQ,IAAJ,CAAS,KAAKR,GAAd,EAAkB,CAAlB,EAAqB,CAArB,EAAwBD,MAAxB;IACD;EACF;;EACDW,MAAM,CAACN,GAAD,EAAK;IACT,MAAML,MAAM,GAAG,KAAKA,MAAL,EAAf;;IACA,IAAGA,MAAM,KAAK,KAAKD,IAAnB,EAAwB;MACtB,KAAKQ,MAAL;IACD;;IACD,KAAKN,GAAL,CAASD,MAAT,IAAmBK,GAAnB;EACD;;EACDK,KAAK,GAAE;IACL,OAAOR,MAAM,CAACU,IAAP,CAAY,KAAKX,GAAL,CAASY,KAAT,CAAe,CAAf,EAAkB,KAAKb,MAAvB,CAAZ,CAAP;EACD;;EACDO,MAAM,GAAE;IACN,MAAMP,MAAM,GAAG,KAAKA,MAApB;IACA,KAAKD,IAAL,GAAY,KAAKA,IAAL,GAAY,CAAxB;IACA,MAAME,GAAG,GAAGC,MAAM,CAACC,WAAP,CAAmB,KAAKJ,IAAxB,CAAZ;IACA,KAAKE,GAAL,CAASQ,IAAT,CAAcR,GAAd,EAAkB,CAAlB,EAAqB,CAArB,EAAwBD,MAAxB;IACA,KAAKC,GAAL,GAAWA,GAAX;EACD;;EACDa,QAAQ,CAACC,QAAD,EAAU;IAChB,IAAGA,QAAH,EAAY;MACV,OAAO,KAAKd,GAAL,CAASY,KAAT,CAAe,CAAf,EAAkB,KAAKb,MAAvB,EAA+Bc,QAA/B,CAAwCC,QAAxC,CAAP;IACD,CAFD,MAEK;MACH,OAAOC,UAAU,CAACC,SAAX,CAAqBJ,KAArB,CAA2BK,IAA3B,CAAgC,KAAKjB,GAAL,CAASY,KAAT,CAAe,CAAf,EAAkB,KAAKb,MAAvB,CAAhC,CAAP;IACD;EACF;;EACDmB,MAAM,GAAE;IACN,OAAO,KAAKL,QAAL,CAAc,MAAd,CAAP;EACD;;EACDM,KAAK,GAAE;IACL,KAAKpB,MAAL,GAAc,CAAd;EACD;;AA3DmB;;AA8DtB,eAAeH,gBAAf"},"metadata":{},"sourceType":"module"}