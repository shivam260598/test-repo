{"ast":null,"code":"import ResizeableBuffer from '../utils/ResizeableBuffer.js'; // white space characters\n// https://en.wikipedia.org/wiki/Whitespace_character\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types\n// \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff\n\nconst np = 12;\nconst cr = 13; // `\\r`, carriage return, 0x0D in hexadécimal, 13 in decimal\n\nconst nl = 10; // `\\n`, newline, 0x0A in hexadecimal, 10 in decimal\n\nconst space = 32;\nconst tab = 9;\n\nconst init_state = function (options) {\n  return {\n    bomSkipped: false,\n    bufBytesStart: 0,\n    castField: options.cast_function,\n    commenting: false,\n    // Current error encountered by a record\n    error: undefined,\n    enabled: options.from_line === 1,\n    escaping: false,\n    escapeIsQuote: Buffer.isBuffer(options.escape) && Buffer.isBuffer(options.quote) && Buffer.compare(options.escape, options.quote) === 0,\n    // columns can be `false`, `true`, `Array`\n    expectedRecordLength: Array.isArray(options.columns) ? options.columns.length : undefined,\n    field: new ResizeableBuffer(20),\n    firstLineToHeaders: options.cast_first_line_to_header,\n    needMoreDataSize: Math.max( // Skip if the remaining buffer smaller than comment\n    options.comment !== null ? options.comment.length : 0, // Skip if the remaining buffer can be delimiter\n    ...options.delimiter.map(delimiter => delimiter.length), // Skip if the remaining buffer can be escape sequence\n    options.quote !== null ? options.quote.length : 0),\n    previousBuf: undefined,\n    quoting: false,\n    stop: false,\n    rawBuffer: new ResizeableBuffer(100),\n    record: [],\n    recordHasError: false,\n    record_length: 0,\n    recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 0 : Math.max(...options.record_delimiter.map(v => v.length)),\n    trimChars: [Buffer.from(' ', options.encoding)[0], Buffer.from('\\t', options.encoding)[0]],\n    wasQuoting: false,\n    wasRowDelimiter: false,\n    timchars: [Buffer.from(Buffer.from([cr], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([nl], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([np], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([space], 'utf8').toString(), options.encoding), Buffer.from(Buffer.from([tab], 'utf8').toString(), options.encoding)]\n  };\n};\n\nexport { init_state };","map":{"version":3,"names":["ResizeableBuffer","np","cr","nl","space","tab","init_state","options","bomSkipped","bufBytesStart","castField","cast_function","commenting","error","undefined","enabled","from_line","escaping","escapeIsQuote","Buffer","isBuffer","escape","quote","compare","expectedRecordLength","Array","isArray","columns","length","field","firstLineToHeaders","cast_first_line_to_header","needMoreDataSize","Math","max","comment","delimiter","map","previousBuf","quoting","stop","rawBuffer","record","recordHasError","record_length","recordDelimiterMaxLength","record_delimiter","v","trimChars","from","encoding","wasQuoting","wasRowDelimiter","timchars","toString"],"sources":["/Users/shivamsingh/stocks-application/node_modules/csv-parse/lib/api/init_state.js"],"sourcesContent":["\nimport ResizeableBuffer from '../utils/ResizeableBuffer.js';\n\n// white space characters\n// https://en.wikipedia.org/wiki/Whitespace_character\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types\n// \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff\nconst np = 12;\nconst cr = 13; // `\\r`, carriage return, 0x0D in hexadécimal, 13 in decimal\nconst nl = 10; // `\\n`, newline, 0x0A in hexadecimal, 10 in decimal\nconst space = 32;\nconst tab = 9;\n\nconst init_state = function(options){\n  return {\n    bomSkipped: false,\n    bufBytesStart: 0,\n    castField: options.cast_function,\n    commenting: false,\n    // Current error encountered by a record\n    error: undefined,\n    enabled: options.from_line === 1,\n    escaping: false,\n    escapeIsQuote: Buffer.isBuffer(options.escape) && Buffer.isBuffer(options.quote) && Buffer.compare(options.escape, options.quote) === 0,\n    // columns can be `false`, `true`, `Array`\n    expectedRecordLength: Array.isArray(options.columns) ? options.columns.length : undefined,\n    field: new ResizeableBuffer(20),\n    firstLineToHeaders: options.cast_first_line_to_header,\n    needMoreDataSize: Math.max(\n      // Skip if the remaining buffer smaller than comment\n      options.comment !== null ? options.comment.length : 0,\n      // Skip if the remaining buffer can be delimiter\n      ...options.delimiter.map((delimiter) => delimiter.length),\n      // Skip if the remaining buffer can be escape sequence\n      options.quote !== null ? options.quote.length : 0,\n    ),\n    previousBuf: undefined,\n    quoting: false,\n    stop: false,\n    rawBuffer: new ResizeableBuffer(100),\n    record: [],\n    recordHasError: false,\n    record_length: 0,\n    recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 0 : Math.max(...options.record_delimiter.map((v) => v.length)),\n    trimChars: [Buffer.from(' ', options.encoding)[0], Buffer.from('\\t', options.encoding)[0]],\n    wasQuoting: false,\n    wasRowDelimiter: false,\n    timchars: [\n      Buffer.from(Buffer.from([cr], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([nl], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([np], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([space], 'utf8').toString(), options.encoding),\n      Buffer.from(Buffer.from([tab], 'utf8').toString(), options.encoding),\n    ]\n  };\n};\n\nexport {init_state};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}